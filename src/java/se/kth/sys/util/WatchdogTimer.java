package se.kth.sys.util;

import java.util.Timer;
import java.util.TimerTask;

/**
 * A timer for helping to filter events at an approximate frequency.
 * 
 * This timer must be polled regularly, and will at an approximate real time frequency
 * return true, otherwise return false.
 * 
 * The polling events should be generated by the application or service when either real progress
 * has been made during a task, or a known good idle state has been confirmed.
 * 
 * @author abo
 *
 */
public class WatchdogTimer {

	private boolean need_watchdog_update = true;
	private Timer watchdogExpirerTimer = new Timer();

	/**
	 * Create a watchdog with the given maximum period.
	 * 
	 * The service must call dequeueUpdate() at least every watchdog_msec milliseconds.
	 * 
	 * @param watchdog_msec maximum amount of time between each watchdog update
	 */
	public WatchdogTimer(final long watchdog_msec) {
		watchdogExpirerTimer.schedule(new TimerTask() {
			@Override
			public void run() {
				need_watchdog_update = true;
			}
		}, 0, watchdog_msec / 3);
	}

	/**
	 * Check if the watchdog timer is close to expiring, and acknowledge.
	 * 
	 * This must only be called as a result of an explicit status update from the application.
	 * 
	 * The caller promises to ensure a watchdog update is sent promptly if this method returns true.
	 * 
	 * @return true if a watchdog update was needed, otherwise false
	 */
	public boolean dequeueUpdate() {
		if (need_watchdog_update) {
			need_watchdog_update = false;
			return true;
		}
		return false;
	}

	/**
	 * Stop the watchdog timer.
	 */
	public void stop() {
		watchdogExpirerTimer.cancel();
	}

}
